import {randomFillSync} from 'crypto'
import {UDPChunkedTransport} from './udp_chunked_transport'
import {udpRecvChunks, asJSONParsedMessage} from './udp_recv_impl'

const zero = Buffer.from([0])
export class UDPMessageTransport extends UDPChunkedTransport ::
  // 00 «packet body» — single packet transmission
  // iinn uuuu uuuu uukk «packet body» — multi packet transmission
  //       ii :: message number (1-based)
  //       nn :: count
  //       uuuu uuuu uukk :: message id, where kk is an in-memory client incremented byte

  _build_packet(part, common, idx, count) ::
    if undefined === common ::
      return @# zero, part

    return @#
      Buffer.from @# 1+idx, count
      common
      part

  _build_common() ::
    let msgid = this._msgid
    if undefined === msgid ::
      this._msgid = msgid = Buffer.alloc(6)
      randomFillSync @ msgid, 0, 5
      msgid[5] = 0x00 // local sequence number
    else if 0xff === msgid[5] ::
      randomFillSync @ msgid, 0, 5
      msgid[5] = 0x00 // sequence number is saturated; increment
    else ::
      msgid[5]++
    return msgid.slice()

Object.assign @ UDPMessageTransport.prototype, @:
  packet_size: 8192
  header_size: 8
  max_chunks: 128
  compress: 'gzip'


export function udp_message_parser(inflightById, on_message) ::
  const {feed, decode} = udpRecvChunks(inflightById, on_message)
  return handle_packet

  function handle_packet(packet, rinfo) ::
    if 0 === packet[0] ::
      return decode @ packet.slice(1), [rinfo]

    const [idx, count] = packet
    const msgid = packet.hexSlice(1, 8)
    return feed @ msgid, count, idx, packet.slice(8), rinfo

export function udp_message_client(options) ::
  const transport = new UDPMessageTransport @ options
  send.send = send
  return send

  function send(msg) ::
    return transport.send @ Buffer.from @ JSON.stringify @ msg


export function udp_json_parser(inflightById, on_message) ::
  if 'function' === typeof inflightById && undefined === on_message ::
    on_message = inflightById; inflightById = new Map()
  return udp_message_parser @ inflightById, asJSONParsedMessage(on_message)

export function udp_json_client(options) ::
  const transport = new UDPMessageTransport @ options
  send.send = send
  return send

  function send(msg) ::
    return transport.send @ Buffer.from @ JSON.stringify @ msg
